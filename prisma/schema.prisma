// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile{
  id          String @id @default(uuid()) @map("_id")
  userId      String @unique
  name        String 
  email       String
  imageUrl    String

  servers     Server[]
  members     Member[]
  channels    Channel[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Server{
  id          String @id @default(uuid()) @map("_id")
  name        String
  imageUrl    String
  inviteCode  String  @unique

  profileId   String
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members     Member[]
  channels    Channel[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum MemberRole{
  ADMIN
  MODERATOR
  GUEST
}

model Member{
  id          String @id @default(uuid()) @map("_id")
  role        MemberRole @default(GUEST)

  profileId   String
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId    String
  server      Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)

  conversationInitiated   Conversation[] @relation("MemberOne")
  conversationReceived    Conversation[] @relation("MemberTwo")

  messages    Message[]
  directMessages DirectMessage[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ChannelType{
  TEXT
  AUDIO
  VIDEO
}

model Channel{
  id          String @id @default(uuid()) @map("_id")
  name        String
  type        ChannelType @default(TEXT)

  profileId   String
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId    String
  server      Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
  messages    Message[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message{
  id          String @id @default(uuid()) @map("_id")
  content     String 

  fileUrl     String? 

  memberId    String
  member      Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId   String
  channel     Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted     Boolean @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Conversation{
  id          String @id @default(uuid()) @map("_id")

  memberOneId String
  memberOne   Member  @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member  @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade) 

  directMessages DirectMessage[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([memberOneId, memberTwoId])
}

model DirectMessage{
  id        String @id @default(uuid()) @map("_id")
  content   String
  fileUrl    String?

  memberId  String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  deleted   Boolean @default(false)
  conversationId  String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  

}

// For channel we are not creating any conversation object 
// we are just directly creating the message and adding into the channel
// as channel has a list of messages 
// It will automatically added to the channel 
